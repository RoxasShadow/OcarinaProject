Un plugin consente di estendere le funzionalità di Ocarina, implementando nuove funzioni.
Di seguito un breve tutorial pratico per lo sviluppo e l'installazione.

1. Il file plugin.cfg
	Il file plugin.cfg, contenuto in ogni plugin, consente di ottenere importanti informazioni su ognuno di essi.
	Un esempio per il plugin `HelloWorld` potrebbe essere il seguente.
	
		name = ChiTiPensa
		version = 1.0
		author = Giovanni Capuano
		website = www.giovannicapuano.net
		description = Who is thinking you right now?
		description[it] = Chi ti sta pensando in questo momento?
		path = ChiTiPensa/chitipensa.php
		working = first
		enabled = true
		
	Nella prima riga abbiamo un il nome con cui viene individuato il plugin, la versione, l'autore,
	il suo sito web (privo della dichiarazione del protocollo), una breve descrizione delle sue
	funzionalità (una per tutti, e una localizzata, nel suo caso in italiano) e il percorso.
	Subito dopo definiamo quando deve essere attivato (`first` all'inizializzazione del CMS e `after` subito
	prima del rendering) e lo stato (`true` se attivo, `false` se disattivo).
	
	Volendo, possiamo anche utilizzare i commenti nel file di configurazione.
	Possiamo scrivere dove vogliamo nel nostro file di configurazione, basta anteporre al commento
	uno dei seguenti caratteri:
		/* */ -> Commento multilinea stile C (il numero di asterischi e indifferente, ex.: /***** **/)
		// -> Commento a singola linea stile C
		'' -> Commento a singola linea stile Visual Basic
		## -> Commento a singola linea stile Perl
		;; -> Commento a singola linea stile ASM
	
2. Il plugin
	Ora procediamo a creare il plugin vero e proprio, che altro non farà che visualizzare
	un utente a caso al visitatore.
	Creiamo quindi una cartella chiamata `ChiTiPensa` in /plugin/plugins/, nel quale creiamo un
	file vuoto chiamato `chitipensa.php` e copiamo il file di configurazione creato poc'anzi.
	Procediamo con lo scrivere il codice.
	
		<?php
		class ChiTiPensa extends User implements FrameworkPlugin {
			private function getSentences() {
				$language = substr($_SERVER['HTTP_ACCEPT_LANGUAGE'], 0, 2);
				$array = array();
				if($language == 'it') {
					$array['notfound'] = 'Nessuno! Qui non c\'è anima viva D:';
					$array['presentation'] = 'In questo momento ti sta pensando molto intensamente... ';
				}
				else {
					$array['notfound'] = 'Nobody! There is not a soul here D:';
					$array['presentation'] = 'Right now thinking you very deeply...';
				}
				return $array;
			}
				
			public function main($templateVarList) {
				$rendering = array();
				$language = $this->getSentences();
				$userList = parent::getUser();
				$nickname = ($userList) ? $userList[rand(0, parent::countUser()-1)]->nickname : '';
				$chitipensa = ($nickname !== '') ? '<a href="'.$this->config[0]->url_index.'/profile/'.$nickname.'.html">'.$nickname.'</a>!' : $language['notfound'];
				$rendering['postmenu'] = $templateVarList['postmenu'].'<div align="center">'.$language['presentation'].$chitipensa.'</div>';
				return $rendering;
			}
	
			public function install() {
				return true;
			}
	
			public function disinstall() {
				return true;
			}
		}
	
	Come possiamo vedere, abbiamo dato alla classe lo stesso nome del plugin.
	Essa estende User (opzionale), in modo tale da usufruire dei suoi metodi, e implementa l'interfaccia
	FrameworkPlugin (obbligatorio).
	Dichiariamo per prima cosa un array vuoto e un metodo privato getSentences() che provvederà alla localizzazione.
	Quindi rileviamo la lingua del client, e creiamo un array dove definiamo i vari testi, che poi diamo in output.
	Ora è il momento del metodo principale `main()`, che cattura l'array del metodo sopra definito e ottiene un oggetto
	contenente gli utenti dal metodo `getUser()` della classe ereditata User.
	Creiamo una variabile `$nickname`, dove generiamo un numero pseudocasuale di range 0-MAX, che diamo come valore
	al nostro oggetto, nel quale estraiamo il relativo valore `nickname`, ma non dopo un controllo su un eventuale errore
	di `getUser()`.
	Incapsuliamo quindi il nickname in un tag a, che inseriamo alla fine del menù (tramite il tag template predefinito `postmenu`).
	Ritorniamo quindi l'array `$rendering`.
	Per concludere, dichiariamo due metodi pubblici `install()` e `disinstall()`, che provvedono ad un'eventuale
	procedura prima dell'installazione o rimozione automatica del plugin (ad esempio creando/rimuovendo una tabella del database).
	Ma dal momento che, nel nostro caso, non abbiamo bisogno di alcuna particolare procedura, ritorniamo un booleano true.
	
3. Note
	In questo caso, la superclasse a cui facciamo riferimento è `User`, e accediamo ai suoi metodi tramite la parola chiave `parent::`.
	Attenzione però di non esagerare!
	Infatti ogni qual volta utilizziamo l'ereditarietà, le prestazioni globali diminuiscono, dal momento che si viene a creare una nuova istanza della gerarchia di classi, con conseguente overhead.
	Inoltre sono a disposizione dei plugin dei specifici tag nei template, dove inserire eventuali righe HTML.
	Questi tag sono:
		`head` -> Prima della chisura del tag head
		`body` -> Subito prima dei contenuti
		`menu` -> Subito prima del menù
		`postmenu` -> Subito dopo il menù
		`stats` -> Le statistiche del sito
		`footer` -> Prima della chiusura del tag body
	Una piccola nota tecnica per concludere la sezione: impostiamo il working ad `after` quando abbiamo bisogno di agire su tag del motore di rendering già istanziati e pronti ad essere utilizzati (come ad esempio è stato fatto per il plugin NoSpam), mentre `first` dovrebbe andare bene in tutti gli altri casi.

4. Tips and Tricks
	Aggiungi alla fine del tuo plugin.cfg un tag `textmanipulation` con valore `true` se stai lavorando ad un plugin che manipola il testo (BBCode prima di tutto).
	Questo ti permetterà di farlo funzionare anche nello script che gestisce le anteprime del testo.

Insomma, possiamo fare di tutto, l'importante è stare attenti a creare plugin sicuri, corretti e veloci :D
