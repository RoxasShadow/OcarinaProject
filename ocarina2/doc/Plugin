Un plugin consente di estendere le funzionalità di Ocarina, implementando nuove funzioni.
Di seguito un breve tutorial pratico per lo sviluppo e l'installazione.

1. Il file plugins.cfg
	Il file plugins.cfg (/plugin/plugins.cfg) consente di monitorare i plugin attivi
	e di ottenere eventuali informazioni su ognuno di essi.
	Quando si installa un nuovo plugin, bisogna aggiungere una nuova sezione al file.
	Un esempio per il plugin `Today` potrebbe essere il seguente.
	
		name = HelloWorld
		version = 1.0
		author = Giovanni Capuano
		website = www.giovannicapuano.net
		description = Saluta il mondo!
		path = ./plugin/plugins/HelloWorld/hello.php
		enabled = true
	
		name = Today
		version = 1.0
		author = Your Name
		website = www.yoursite.me
		description = Today ti permette di scoprire quale giorno è oggi.
		path = ./plugin/plugins/Today/today.php
		enabled = true
		
	Nella prima riga abbiamo un il nome con cui viene individuato il plugin, la versione, l'autore,
	il suo sito web (privo della dichiarazione del protocollo), una breve descrizione delle sue
	funzionalità, il percorso assoluto e infine lo stato, `true` se attivo, `false` se disattivo.
	
2. Il plugin
	Ora procediamo a creare il plugin vero e proprio, che altro non farà che visualizzare
	la data odierna al visitatore.
	Creiamo quindi una cartella chiamata `Today` in /plugin/plugins/, nel quale creiamo un
	file vuoto chiamato `today.php`.
	Procediamo con lo scrivere il codice.
	
	<?php
	class Today implements FrameworkPlugin {
		private $rendering = array();
	
		private function getDate() {
			return date('d-m-y');
		}
	
		public function main() {
			$this->rendering['data'] = $this->getDate();
			return $this->rendering;
		}
	}
	
	Come possiamo vedere, abbiamo dato alla classe lo stesso nome del plugin.
	Dichiariamo per prima cosa un array vuoto e un metodo `getDate()` che ritorna la data
	odierna in formato GG-MM-AA.
	Dopodichè dichiariamo il metodo `main()`, quello principale, che provvederà a creare un nuovo
	tag per il motore di rendering di nome `data` che conterrà la data prelevata dal metodo che
	abbiamo creato poco fa.
	Infine ritorniamo al motore di elaborazione dei plugin l'array, che provvederà all'istanziazione.
	
Il plugin è ora pronto, basterà copiare il tag `{$data}` nella posizione che preferiamo all'interno
del template per fare in modo che chiunque possa vedere la data odierna.

Ma se vogliamo usufruire dei metodi interni di Ocarina, non c'è alcun problema!
Basterà infatti estendere il nostro plugin mediante una delle classi del core tramite la keyword `extends`.
Ad esempio, diamo un'occhiata a questo plugin:

<?php
class ChiTiPensa extends User implements FrameworkPlugin {
	private $rendering = array();
	
	public function main() {
		$userList = parent::getUser();
		$this->rendering['luckyuser'] = ($userList) ? $userList[rand(0, parent::countUser()-1)]->nickname : 'Nessuno! Qui non c\'è anima viva D:';
		return $this->rendering;
	}
}

In questo caso, la superclasse a cui facciamo riferimento è `User`, e accediamo ai suoi metodi tramite la parola chiave `parent::`.
Attenzione però di non esagerare!
Infatti ogni qual volta utilizziamo l'ereditarietà, le prestazioni globali diminuiscono, dal momento che si viene a creare una nuova istanza della gerarchia di classi, con conseguente overhead.

Insomma, possiamo fare di tutto, dal prelevare dati dal database, a creare nuovi tipi di contenuti.
L'importante è stare attenti a creare plugin sicuri e veloci, il solo limite è la fantasia!
