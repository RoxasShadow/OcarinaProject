Ocarina2 è un software di ingegneria creativa.
Esso pone le basi per qualsiasi lavoro tu voglia fare, che sia un blog, un social
network, un sito di e-commerce o una web-application di tua ideazione.

Requisiti:
Apache2 & GNU/Linux*
PHP5
MySQL**
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

Ocarina2 (da ora chiamato anche CMS) ti dà la possibilità di scrivere news e pagine,
ovvero contenuti personalizzabili via dei tag chiamati BBCode divisi in categorie.
Le news sono visualizzate in anteprima nella pagina principale, insieme ai commenti
che sono stati inviati dagli utenti.
Ogni news ha una singola pagina dedicata che permette di visualizzarla per tutta la sua
interezza, di votarla, di commentarla, di leggere gli altri commenti e di raggiungerli
tramite una pagina dedicata.
Per le pagine valgono le stesse nozioni su descritte, ma al contrario non permettono
di essere commentate e non sono visualizzate nella index.
Ogni pagina o news è indicata nell'URL con un minititolo (o permalink), ovvero una conversione
del titolo ottimizzato per i motori di ricerca e, come già detto, appartiene ad una determinata categoria.
Accedendoci sarà possibile visualizzare tutti i contenuti ad essa legati.
L'archivio, al contrario, raggruppa tutte le pagine e le news che sono state create,
indistintamente, e mostra, inoltre, anche le visite di ciascuna.
Tramite il motore di ricerca, è possibile cercare pagine, news e commenti digitando
una parola chiave.
Ogni utente, dopo la registrazione, può commentare, può votare le news o le pagine,
può personalizzare il proprio profilo e verrà visualizzato nella lista degli utenti online,
nonchè potrà anche inviare messaggi personali ad altri utenti.
Nel caso un utente smarrisca la propria password, potrà farsene inviare una nuova e casuale
nell'indirizzo email specificato alla registrazione (e sempre modificabile), per poi poterla
modificare senza alcun problema.
Sia gli utenti che i visitatori potranno abbonarsi ai feed RSS sia delle pagine che delle news,
e i motori di ricerca potranno visualizzare un archivio completo di tutte le pagine del sito
tramite una sitemap sempre aggiornata.
Potrete dare agli utenti anche la possibilità di scrivere della applicazioni che interagiscano
con il vostro sito.
Potranno infatti includere nei loro programmi per desktop, server o dispositivi mobili quasi
tutte le funzioni di cui potrebbero usufruire via un normalissimo browser internet.
Dall'area di amministrazione, gli amministratori (che possiedono tutti i poteri all'interno del sito),
potranno creare/modificare/cancellare/approvare le pagine, le news e i commenti.
Potrà apportare modifiche alla configurazione del CMS, gestire le categorie, caricare o rimuovere
immagini, visualizzare o cancellare i log che vengono aggiornati ad ogni azione particolarmente
importante di ogni utente, modificare il grado di questi ultimi e creare il proprio robots.txt,
che comunica ai motori di ricerca quali pagine indicizzare e quali no.
La maggior parte dei link (news, pagine, commenti, profili degli utenti, feed, errori, categorie e
news sfogliate dalla index) sono ottimizzati per i motori di ricerca sfruttando la direttiva url_rewrite
messa a disposizione dal potente server web Apache2.
Il CMS dispone di un motore di rendering che permette la creazione anche di più skin (o temi, o template,
o layout), in modo che l'utente possa visualizzare il sito con quella che preferisce.
Il grafico potrà quindi usufruire dei tag dinamici messi a disposizione per creare qualsiasi skin voglia,
senza alcun tipo di restrizione.
Dispone, infine, di un controllore degli aggiornamenti, così che l'amministratore possa effettuare
gli aggiornamenti tempestivamente e gli annunci, ovvero dei testi, simili alle news leggibili solo dallo
staff.

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

	Per i grafici
Come già detto, Ocarina2 dispone di un potente motore di rendering, Smarty 3.0.
Ogni skin si deve trovare in una cartella chiamata con un qualsiasi nome nella directory
dei template (di default è /rendering/templates/).
All'interno di essa devono esserci i file template (estensione .tpl) contenenti il codice
HTML e i tag dinamici.
Nella sottocartella resources andranno messi i fogli di stile, e in un eventuale sottocartella
images le immagini.
È possibile creare una sottocartella include per inserire i template da includere automaticamente
in tutti gli altri (come ad esempio l'header e il footer).

Rappresentando:
/rendering/
↓
templates/
↓
nomeskin/ → *.tpl
↓
include/ → *.tpl
↓
resources/ → *.css → images/

Le eventuali risorse Javascript dovranno essere inserite in /etc/js/, dal momento che verranno
all'occorrenza caricate dinamicamente.
Da notare che di default, è abilitato il caching per 15 giorni nel browser dei file Javascript,
CSS, SWF e delle immagini nel file .htaccess.
Con eventuali modifiche di tali file, l'utente dovrà svuotare la cache del proprio browser per
usufruirne.
Inoltre per velocizzare lo scaricamento delle pagine e con un conseguente alleggerimento di esse,
vengono, sempre di default, compresse nel formato gzip.
È possibile creare anche più skin uguali, nei quali cambia la lingua usata.
In /doc/ è possibile trovare un template ed uno script che possono dare degli esempi per la creazione di nuovi
template.
Notare che la skin per l'amministrazione deve sempre chiamarsi admin.
I tag attualmente disponibili sono quelli usati nei template dell'amministrazione e di default, il quale effetto
è semplice da capire, ma nulla vi vieta di crearne altri, dovete utilizzare il metodo addValue() del motore
di rendering all'interno degli script PHP o, globalmente, nella classe del core class.Rendering.php.
Per maggiori informazioni visualizzate la documentazione ufficiale di Smarty 3.0 che trovate in /doc.
Un buon modo di sviluppare le risorse grafiche, è utilizzare il plugin Firebug insieme a Pagespeed.

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

	Per gli sviluppatori
Da slogan di Ocarina2, il CMS è stato creato per svolgere qualsiasi lavoro.
Nel core troviamo una struttura di classi che si ereditano a vicenda.
Di seguito una breve spiegazione delle classi e delle funzioni principali, in ordine gerarchico

/core/

-class.Languages.php
Viene usato per le traduzioni per i testi che rilascia il CMS.
Il metodo getLanguage() prende come argomento la categoria e l'indice dove si trova la riga di 
traduzione.
La lingua scelta è quella del browser.

-class.Utilities.php
È una classe generica.
Contiene metodi come isURL() che tramite regex controllano la giusta formattazione delle stringhe,
isImage() che effettua una chiamata HTTP per verificare se l'indirizzo a cui punta l'argomento è 
un'immagine (utilizzato per l'avatar dell'utente), purge() che sana le stringhe in entrata per
SQL e XSS injection, unPurge() che rimuove gli slashes provenienti dal database, getClient() che
ritorna un array con le informazioni sul browser del visitatore, metodi che gestiscono le
immagini, eccetera.

-class.MySQL.php
È l'unica classe che comunica direttamente con il database facendo da tramite.
query() esegue direttamente una query SQL, count() prende in input una query già
eseguita con il metodo appena descritto e ritorna le occorrenze trovate, getEnum()
ritorna gli elementi dei campi enum del database, getColumns() ritorna le colonne di una tabella e
get() ritorna un oggetto con i record trovati.

-class.Configuration.php
Dispone di una variabile globale che viene popolata all'istanziazione della classe con l'oggetto
contenente i record della omonima tabella.
Contiene inoltre metodi per la gestione della configurazione.

-class.Category.php | class.News.php | class.Comments.php | class.Page.php | class.Ad.php |
class.PersonalMessage.php
La prima classe gestisce le categorie come campi enum, mentre le restanti cinque dispongono di metodi
per la visualizzazione, rimozione, inserimento e modifica degli elementi ominimi.

-class.User.php
La classe gestisce gli utenti.
getUser() e getVisitator() ritornano un oggetto contenente i record di uno o più utenti/visitatori,
isLogged() controlla se un utente è loggato e intanto aggiorna la lista degli utenti e visitatori
online.
In particolare vengono considerati offline quando dall'ultima azione compiuta (come una visualizzazione
di una pagina) all'istante in cui viene attivato il metodo passa un certo numero di minuti.
Per concludere, il login consiste nella creazione di una sequenza alfanumerica pseudocasuale che viene
hashata in MD5 ed inserita nel database e nel cookie.
Un utente è loggato quando il suo cookie corrisponde a quello presente nel database.
Al momento del login accade che il cookie viene distrutto insieme alla sequenza alfanumerica del database.

-class.Rendering.php
La classe gestisce il motore di rendering Smarty.
Il costrutto provvede alla sua configurazione e al caricamento degli eventuali plugin, e renderize()
mostra la pagina renderizzata con il template in input della skin preferita dall'utente o dalla configurazione.
Vengono inviati, inoltre, tutti i tag dinamici creati con addValue().
È possibile ottenere tutte le skin attualmente presenti con il metodo getSkinList().
Per entrare in modalità debug, basta caricare il template omonimo nella cartella dei template e renderizzarlo.
In /doc/ è possibile trovare un template ed uno script che possono dare degli esempi per la creazione di nuovi
template.
Ricordate che potete modificare la classe per essere compatibile anche con altri motori di rendering.

/etc/

-class.BBCode.php
Questa classe traduce i BBCode in HTML tramite le regex.

-class.Pager.php
È la classe che si occupa dell'impaginazione delle news nella index.

-loadJavascript.js.php
È da includere come uno script javascript nei template.
In sostanza include tutti gli script presenti in /etc/js/ ottimizzandoli.

-class.Recaptcha.php
È la classe che permette di gestire i captcha.
Di default è presente ReCaptcha, ma è possibile usarne altri modificando il contenuto dei vari metodi.

Andiamo sviluppatori, create le vostre classi, modificate quelle esistenti, portate le prestazioni al limite,
aumentate la compatibilità, la stabilità e la velocità e date sfogo alla vostra creatività e genialità! :D
Notare che i componenti aggiuntivi (che non fanno parte del core), devono essere aggiunti in /etc/, dopodichè
li potete trattare come qualsiasi classe del core.

(C) 2011 - Giovanni Capuano

*Ocarina2, come già detto in precedenza, utilizza l'url_rewriting e delle direttive specifiche anche a livello
di sicurezza e di ottimizzazione nel file .htaccess.
È consigliato quindi avere attiva la direttiva url_rewrite e il parsing dei file .htaccess.
Per ottenere il caching delle risorse, inoltre, c'è bisogno anche dei moduli expires e header, ma non è obbligatorio.

**Modificando la classe class.MySQL.php, è possibile abilitare il supporto per qualsiasi DBMS.
